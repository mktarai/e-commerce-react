{"version":3,"sources":["@utils/Config.js","Home/index.jsx","SignUp/index.jsx","Login/index.jsx","App.js","serviceWorker.js","index.js"],"names":["Object","freeze","accessToken","Home","useState","place","setPlace","locality","setLocality","useEffect","navigator","geolocation","getCurrentPosition","position","fetch","coords","longitude","latitude","Config","then","response","json","data","features","place_name","text","console","log","Container","fluid","className","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Link","Row","Col","InputGroup","Prepend","Text","style","backgroundColor","icon","faMapMarkerAlt","FormControl","type","size","value","onChange","e","target","aria-label","aria-describedby","faSearch","placeholder","SignUp","Form","onSubmit","preventDefault","noValidate","Group","controlId","Label","Control","Check","label","Button","variant","block","Login","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1e3b9820.chunk.js","sourcesContent":["export default Object.freeze({\n    accessToken: 'pk.eyJ1IjoibWt0MTk4NSIsImEiOiJjazl0b3Y4bjgxODE1M21tcmhqcms0b2p2In0.GetYrxM47sRKAEfw0yf7kQ'\n})","import React, { useEffect, useState } from 'react';\nimport { Container, Navbar, Nav, Row, Col, InputGroup, FormControl } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faMapMarkerAlt, faSearch } from '@fortawesome/free-solid-svg-icons'\n\nimport Config from '../@utils/Config';\n\nfunction Home() {\n\n    const [place, setPlace] = useState('');\n    const [locality, setLocality] = useState('');\n\n    useEffect(() => {\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition((position) => {\n                fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/${position.coords.longitude},${position.coords.latitude}.json?access_token=${Config.accessToken}`).then(response => {\n                    return response.json()\n                }).then(data => {\n                    setLocality(data.features[1].place_name);\n                    setPlace(data.features[2].text);\n                });\n            }, () => {\n                console.log('Unable to retrieve your location!');\n            })\n        } else {\n            console.log('Geolocation is not supported by your browser!');\n        }\n    }, [])\n\n    const handleChange = (e) => {\n        setLocality(e.target.value);\n    }\n\n    return (\n        <Container fluid className=\"pr-0 pl-0\">\n            <Navbar bg=\"light\" expand=\"lg\">\n                <Navbar.Brand href=\"#home\"></Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                <Navbar.Collapse id=\"basic-navbar-nav\">\n                    <Nav className=\"mr-auto\">\n                        <Nav.Link href=\"#/login\">Login</Nav.Link>\n                        <Nav.Link href=\"#/signup\">Register</Nav.Link>\n                    </Nav>\n                </Navbar.Collapse>\n            </Navbar>\n            <header className=\"text-center mt-4\">\n                <h1 className=\"display-3\">Clone</h1>\n                <p>Discover the best food and drinks</p>\n                <p>in</p>\n                <p>{place}</p>\n            </header>\n            <Row className=\"mr-0 ml-0 mt-4\">\n                <Col>\n                    <InputGroup className=\"mb-3\">\n                        <InputGroup.Prepend>\n                            <InputGroup.Text className=\"border-right-0\" style={{backgroundColor: '#ffffff'}} id=\"basic-geolocation\"><FontAwesomeIcon icon={faMapMarkerAlt} /></InputGroup.Text>\n                        </InputGroup.Prepend>\n                        <FormControl type=\"text\" size=\"lg\" className=\"border-left-0\" value={locality} onChange={handleChange} aria-label=\"geolocation\" aria-describedby=\"basic-geolocation\" />\n                    </InputGroup>\n                </Col>\n            </Row>\n            <Row className=\"mr-0 ml-0 mt-1\">\n                <Col>\n                    <InputGroup className=\"mb-3\">\n                        <InputGroup.Prepend>\n                            <InputGroup.Text className=\"border-right-0\" style={{backgroundColor: '#ffffff'}} id=\"basic-geolocation\"><FontAwesomeIcon icon={faSearch} /></InputGroup.Text>\n                        </InputGroup.Prepend>\n                        <FormControl type=\"text\" size=\"lg\" className=\"border-left-0\" placeholder=\"Search...\" aria-label=\"geolocation\" aria-describedby=\"basic-geolocation\" />\n                    </InputGroup>\n                </Col>\n            </Row>\n        </Container>\n    )\n}\n\nexport default Home;","import React, { useEffect } from 'react';\nimport { Container, Row, Col, Navbar, Nav, Form, Button } from 'react-bootstrap';\n\nfunction SignUp() {\n\n    useEffect(() => {\n\n    }, [])\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n    }\n\n    return (\n        <Container fluid className=\"pr-0 pl-0\">\n            <Navbar bg=\"light\" expand=\"lg\">\n                <Navbar.Brand href=\"#home\"></Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                <Navbar.Collapse id=\"basic-navbar-nav\">\n                    <Nav className=\"mr-auto\">\n                        <Nav.Link href=\"#/login\">Login</Nav.Link>\n                        <Nav.Link href=\"#/signup\">Register</Nav.Link>\n                    </Nav>\n                </Navbar.Collapse>\n            </Navbar>\n            <header className=\"text-center mt-2\">\n                <p className=\"display-4\">Sign Up</p>              \n            </header>\n            <Row className=\"mr-0 ml-0 mt-4\">\n                <Col>\n                    <Form onSubmit={handleSubmit} noValidate>\n                        <Form.Group controlId=\"formBasicEmail\">\n                            <Form.Label>Name</Form.Label>\n                            <Form.Control type=\"text\" size=\"lg\" />\n                        </Form.Group>\n                        <Form.Group controlId=\"formBasicEmail\">\n                            <Form.Label>Phone/Email</Form.Label>\n                            <Form.Control type=\"text\" size=\"lg\" />\n                        </Form.Group>\n                        <Form.Group controlId=\"formBasicPassword\">\n                            <Form.Label>Password</Form.Label>\n                            <Form.Control type=\"password\" size=\"lg\" />\n                        </Form.Group>\n                        <Form.Group controlId=\"formBasicCheckbox\">\n                            <Form.Check type=\"checkbox\" label=\"I agree\" />\n                        </Form.Group>\n                        <Button variant=\"outline-dark\" size=\"lg\" type=\"submit\" block>\n                            Create Account\n                        </Button>\n                    </Form>\n                </Col>\n            </Row>\n        </Container>\n    )\n}\n\nexport default SignUp;","import React, { useEffect } from 'react';\nimport { Container, Row, Col, Navbar, Nav, Form, Button } from 'react-bootstrap';\n\nfunction Login() {\n\n    useEffect(() => {\n\n    }, [])\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n    }\n\n    return (\n        <Container fluid className=\"pr-0 pl-0\">\n            <Navbar bg=\"light\" expand=\"lg\">\n                <Navbar.Brand href=\"#home\"></Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                <Navbar.Collapse id=\"basic-navbar-nav\">\n                    <Nav className=\"mr-auto\">\n                        <Nav.Link href=\"#/login\">Login</Nav.Link>\n                        <Nav.Link href=\"#/signup\">Register</Nav.Link>\n                    </Nav>\n                </Navbar.Collapse>\n            </Navbar>\n            <header className=\"text-center mt-2\">\n                <p className=\"display-4\">Sign In</p>              \n            </header>\n            <Row className=\"mr-0 ml-0 mt-4\">\n                <Col>\n                    <Form onSubmit={handleSubmit} noValidate>\n                        <Form.Group controlId=\"formBasicEmail\">\n                            <Form.Label>Phone/Email</Form.Label>\n                            <Form.Control type=\"text\" size=\"lg\" />                            \n                        </Form.Group>\n                        <Form.Group controlId=\"formBasicPassword\">\n                            <Form.Label>Password</Form.Label>\n                            <Form.Control type=\"password\" size=\"lg\" />\n                        </Form.Group>                       \n                        <Button variant=\"outline-dark\" type=\"submit\" size=\"lg\" block>\n                            Login\n                        </Button>\n                    </Form>\n                </Col>\n            </Row>\n        </Container>\n    )\n}\n\nexport default Login;","import React from 'react';\nimport { HashRouter as Router, Route } from 'react-router-dom';\n\nimport Home from './Home';\nimport SignUp from './SignUp';\nimport Login from './Login';\n\nfunction App() {\n  return (\n    <Router>\n      <Route exact path=\"/\" component={Home} />\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/signup\" component={SignUp} />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}